//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.ML
{
   public static partial class MlInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveKNearestGetDefaultK(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveKNearestSetDefaultK(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveKNearestGetIsClassifier(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveKNearestSetIsClassifier(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveKNearestGetEmax(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveKNearestSetEmax(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern KNearest.Types cveKNearestGetAlgorithmType(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveKNearestSetAlgorithmType(
        IntPtr obj,  
        KNearest.Types val);
     
   }

   public partial class KNearest
   {

     /// <summary>
     /// Default number of neighbors to use in predict method
     /// </summary>
     public int DefaultK
     {
        get { return MlInvoke.cveKNearestGetDefaultK(_ptr); } 
        set { MlInvoke.cveKNearestSetDefaultK(_ptr, value); }
     }
     
     /// <summary>
     /// Whether classification or regression model should be trained
     /// </summary>
     public bool IsClassifier
     {
        get { return MlInvoke.cveKNearestGetIsClassifier(_ptr); } 
        set { MlInvoke.cveKNearestSetIsClassifier(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter for KDTree implementation
     /// </summary>
     public int Emax
     {
        get { return MlInvoke.cveKNearestGetEmax(_ptr); } 
        set { MlInvoke.cveKNearestSetEmax(_ptr, value); }
     }
     
     /// <summary>
     /// Algorithm type
     /// </summary>
     public KNearest.Types AlgorithmType
     {
        get { return MlInvoke.cveKNearestGetAlgorithmType(_ptr); } 
        set { MlInvoke.cveKNearestSetAlgorithmType(_ptr, value); }
     }
     
   }
}
