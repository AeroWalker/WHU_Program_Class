//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Dnn
{
   public static partial class DnnInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetSetPreferableBackend(
        IntPtr obj,  
        Backend val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetSetPreferableTarget(
        IntPtr obj,  
        Target val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetEnableFusion(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetEnableWinograd(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveNetEmpty(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveNetSetHalideScheduler(IntPtr obj, IntPtr str);
     
   }

   public partial class Net
   {

     /// <summary>
     /// Ask network to use specific computation backend where it supported.
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetPreferableBackend(Backend value)
     {
        DnnInvoke.cveNetSetPreferableBackend(_ptr, value); 
     }
     
     /// <summary>
     /// Ask network to make computations on specific target device.
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetPreferableTarget(Target value)
     {
        DnnInvoke.cveNetSetPreferableTarget(_ptr, value); 
     }
     
     /// <summary>
     /// Enables or disables layer fusion in the network.
     /// </summary>
	 /// <param name="value">The value</param>
     public void EnableFusion(bool value)
     {
        DnnInvoke.cveNetEnableFusion(_ptr, value); 
     }
     
     /// <summary>
     /// Enables or disables the Winograd compute branch. The Winograd compute branch can speed up 3x3 Convolution at a small loss of accuracy.
     /// </summary>
	 /// <param name="value">The value</param>
     public void EnableWinograd(bool value)
     {
        DnnInvoke.cveNetEnableWinograd(_ptr, value); 
     }
     
     /// <summary>
     /// Returns true if there are no layers in the network.
     /// </summary>
     public bool Empty
     {
        get { return DnnInvoke.cveNetEmpty(_ptr); } 
     }
     
     /// <summary>
     /// Schedule layers that support Halide backend. Then compile them for specific target. For layers that not represented in scheduling file or if no manual scheduling used at all, automatic scheduling will be applied.
     /// </summary>
	 /// <param name="s">The value</param>
     public void SetHalideScheduler(String s)
     { 
           using (CvString cvs = new CvString(s))
           {  
              DnnInvoke.cveNetSetHalideScheduler(_ptr, cvs); 
           }   
     }
     
   }
}
