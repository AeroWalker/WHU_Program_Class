//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV
{
   public static partial class CvInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFaceDetectorYNSetScoreThreshold(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFaceDetectorYNSetNMSThreshold(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFaceDetectorYNSetTopK(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFaceDetectorYNGetInputSize(IntPtr obj, ref System.Drawing.Size val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFaceDetectorYNSetInputSize(IntPtr obj, ref System.Drawing.Size val);
     
   }

   public partial class FaceDetectorYN
   {

     /// <summary>
     /// The score threshold to filter out bounding boxes of score less than the given value
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetScoreThreshold(float value)
     {
        CvInvoke.cveFaceDetectorYNSetScoreThreshold(_ptr, value); 
     }
     
     /// <summary>
     /// The Non-maximum-suppression threshold to suppress bounding boxes that have IoU greater than the given value
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetNMSThreshold(float value)
     {
        CvInvoke.cveFaceDetectorYNSetNMSThreshold(_ptr, value); 
     }
     
     /// <summary>
     /// The number of bounding boxes to preserve from top rank based on score
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetTopK(int value)
     {
        CvInvoke.cveFaceDetectorYNSetTopK(_ptr, value); 
     }
     
     /// <summary>
     /// The size for the network input, which overwrites the input size of creating model.
     /// </summary>
     public System.Drawing.Size InputSize
     {
        get { System.Drawing.Size v = new System.Drawing.Size(); CvInvoke.cveFaceDetectorYNGetInputSize(_ptr, ref v); return v; } 
        set { CvInvoke.cveFaceDetectorYNSetInputSize(_ptr, ref value); }
     }
     
   }
}
