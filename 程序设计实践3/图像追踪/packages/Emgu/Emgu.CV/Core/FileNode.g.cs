//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV
{
   public static partial class CvInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsNamed(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsEmpty(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsNone(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsSeq(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsMap(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsInt(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsReal(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFileNodeIsString(IntPtr obj);
     
   }

   public partial class FileNode
   {

     /// <summary>
     /// Returns true if the node has a name
     /// </summary>
     public bool IsNamed
     {
        get { return CvInvoke.cveFileNodeIsNamed(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is empty
     /// </summary>
     public bool IsEmpty
     {
        get { return CvInvoke.cveFileNodeIsEmpty(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is a "none" object
     /// </summary>
     public bool IsNone
     {
        get { return CvInvoke.cveFileNodeIsNone(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is a sequence
     /// </summary>
     public bool IsSeq
     {
        get { return CvInvoke.cveFileNodeIsSeq(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is a mapping
     /// </summary>
     public bool IsMap
     {
        get { return CvInvoke.cveFileNodeIsMap(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is an integer
     /// </summary>
     public bool IsInt
     {
        get { return CvInvoke.cveFileNodeIsInt(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is a floating-point number
     /// </summary>
     public bool IsReal
     {
        get { return CvInvoke.cveFileNodeIsReal(_ptr); } 
     }
     
     /// <summary>
     /// Returns true if the node is a text string
     /// </summary>
     public bool IsString
     {
        get { return CvInvoke.cveFileNodeIsString(_ptr); } 
     }
     
   }
}
