//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.XPhoto
{
   public static partial class XPhotoInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveLearningBasedWBGetRangeMaxVal(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveLearningBasedWBSetRangeMaxVal(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveLearningBasedWBGetSaturationThreshold(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveLearningBasedWBSetSaturationThreshold(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveLearningBasedWBGetHistBinNum(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveLearningBasedWBSetHistBinNum(
        IntPtr obj,  
        int val);
     
   }

   public partial class LearningBasedWB
   {

     /// <summary>
     /// Maximum possible value of the input image (e.g. 255 for 8 bit images, 4095 for 12 bit images)
     /// </summary>
     public int RangeMaxVal
     {
        get { return XPhotoInvoke.cveLearningBasedWBGetRangeMaxVal(_ptr); } 
        set { XPhotoInvoke.cveLearningBasedWBSetRangeMaxVal(_ptr, value); }
     }
     
     /// <summary>
     /// Threshold that is used to determine saturated pixels, i.e. pixels where at least one of the channels exceeds saturation_threshold x range_max_val are ignored.
     /// </summary>
     public float SaturationThreshold
     {
        get { return XPhotoInvoke.cveLearningBasedWBGetSaturationThreshold(_ptr); } 
        set { XPhotoInvoke.cveLearningBasedWBSetSaturationThreshold(_ptr, value); }
     }
     
     /// <summary>
     /// Defines the size of one dimension of a three-dimensional RGB histogram that is used internally by the algorithm. It often makes sense to increase the number of bins for images with higher bit depth (e.g. 256 bins for a 12 bit image).
     /// </summary>
     public int HistBinNum
     {
        get { return XPhotoInvoke.cveLearningBasedWBGetHistBinNum(_ptr); } 
        set { XPhotoInvoke.cveLearningBasedWBSetHistBinNum(_ptr, value); }
     }
     
   }
}
