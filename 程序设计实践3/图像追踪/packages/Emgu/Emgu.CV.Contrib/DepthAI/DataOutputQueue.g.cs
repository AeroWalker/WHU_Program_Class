//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Dai
{
   public static partial class DaiInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDataOutputQueueGetBlocking(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveDataOutputQueueSetBlocking(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern UInt32 cveDataOutputQueueGetMaxSize(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveDataOutputQueueSetMaxSize(
        IntPtr obj,  
        UInt32 val);
     
   }

   public partial class DataOutputQueue
   {

     /// <summary>
     /// Specifies if block or overwrite the oldest message in the queue
     /// </summary>
     public bool Blocking
     {
        get { return DaiInvoke.cveDataOutputQueueGetBlocking(_ptr); } 
        set { DaiInvoke.cveDataOutputQueueSetBlocking(_ptr, value); }
     }
     
     /// <summary>
     /// Specifies maximum number of messages in the queue
     /// </summary>
     public UInt32 MaxSize
     {
        get { return DaiInvoke.cveDataOutputQueueGetMaxSize(_ptr); } 
        set { DaiInvoke.cveDataOutputQueueSetMaxSize(_ptr, value); }
     }
     
   }
}
