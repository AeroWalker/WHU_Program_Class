//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Dai
{
   public static partial class DaiInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveXLinkOutGetStreamName(IntPtr obj, IntPtr str);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveXLinkOutSetStreamName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveXLinkOutGetFpsLimit(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveXLinkOutSetFpsLimit(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveXLinkOutGetMetadataOnly(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveXLinkOutSetMetadataOnly(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
   }

   public partial class XLinkOut
   {

     /// <summary>
     /// The Stream Name
     /// </summary>
     public String StreamName
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              DaiInvoke.cveXLinkOutGetStreamName(_ptr, s); 
              return s.ToString();
           }
        } 
        set
        {
           using (CvString s = new CvString(value))
           {  
              DaiInvoke.cveXLinkOutSetStreamName(_ptr, s); 
           }
        }
     }
     
     /// <summary>
     /// A message sending limit. It's approximated from specified rate
     /// </summary>
     public float FpsLimit
     {
        get { return DaiInvoke.cveXLinkOutGetFpsLimit(_ptr); } 
        set { DaiInvoke.cveXLinkOutSetFpsLimit(_ptr, value); }
     }
     
     /// <summary>
     /// Specify whether to transfer only messages attributes and not buffer data
     /// </summary>
     public bool MetadataOnly
     {
        get { return DaiInvoke.cveXLinkOutGetMetadataOnly(_ptr); } 
        set { DaiInvoke.cveXLinkOutSetMetadataOnly(_ptr, value); }
     }
     
   }
}
