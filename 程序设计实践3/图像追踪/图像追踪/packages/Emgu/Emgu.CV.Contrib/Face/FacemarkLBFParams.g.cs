//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Face
{
   public static partial class FaceInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveFacemarkLBFParamsGetShapeOffset(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetShapeOffset(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFacemarkLBFParamsGetVerbose(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetVerbose(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFacemarkLBFParamsGetNLandmarks(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetNLandmarks(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFacemarkLBFParamsGetInitShapeN(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetInitShapeN(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFacemarkLBFParamsGetStagesN(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetStagesN(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFacemarkLBFParamsGetTreeN(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetTreeN(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFacemarkLBFParamsGetTreeDepth(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetTreeDepth(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveFacemarkLBFParamsGetBaggingOverlap(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetBaggingOverlap(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFacemarkLBFParamsGetSaveModel(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveFacemarkLBFParamsSetSaveModel(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveFacemarkLBFParamsGetCascadeFace(IntPtr obj, IntPtr str);
	 [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveFacemarkLBFParamsSetCascadeFace(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveFacemarkLBFParamsGetModelFile(IntPtr obj, IntPtr str);
	 [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveFacemarkLBFParamsSetModelFile(IntPtr obj, IntPtr str);
     
   }

   public partial class FacemarkLBFParams
   {

     /// <summary>
     /// offset for the loaded face landmark points
     /// </summary>
     public double ShapeOffset
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetShapeOffset(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetShapeOffset(_ptr, value); }
     }
     
     /// <summary>
     /// show the training print-out
     /// </summary>
     public bool Verbose
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetVerbose(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetVerbose(_ptr, value); }
     }
     
     /// <summary>
     /// number of landmark points
     /// </summary>
     public int NLandmarks
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetNLandmarks(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetNLandmarks(_ptr, value); }
     }
     
     /// <summary>
     /// multiplier for augment the training data
     /// </summary>
     public int InitShapeN
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetInitShapeN(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetInitShapeN(_ptr, value); }
     }
     
     /// <summary>
     /// number of refinement stages
     /// </summary>
     public int StagesN
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetStagesN(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetStagesN(_ptr, value); }
     }
     
     /// <summary>
     /// number of tree in the model for each landmark point refinement
     /// </summary>
     public int TreeN
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetTreeN(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetTreeN(_ptr, value); }
     }
     
     /// <summary>
     /// the depth of decision tree, defines the size of feature
     /// </summary>
     public int TreeDepth
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetTreeDepth(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetTreeDepth(_ptr, value); }
     }
     
     /// <summary>
     /// overlap ratio for training the LBF feature
     /// </summary>
     public double BaggingOverlap
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetBaggingOverlap(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetBaggingOverlap(_ptr, value); }
     }
     
     /// <summary>
     /// flag to save the trained model or not
     /// </summary>
     public bool SaveModel
     {
        get { return FaceInvoke.cveFacemarkLBFParamsGetSaveModel(_ptr); } 
        set { FaceInvoke.cveFacemarkLBFParamsSetSaveModel(_ptr, value); }
     }
     
     /// <summary>
     /// filename of the face detector model
     /// </summary>
     public String CascadeFace
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              FaceInvoke.cveFacemarkLBFParamsGetCascadeFace(_ptr, s); 
              return s.ToString();
           }
        } 
		set
		{
		   using (CvString s = new CvString(value))
           {  
              FaceInvoke.cveFacemarkLBFParamsSetCascadeFace(_ptr, s); 
           }
		}
     }
     
     /// <summary>
     /// filename where the trained model will be saved
     /// </summary>
     public String ModelFile
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              FaceInvoke.cveFacemarkLBFParamsGetModelFile(_ptr, s); 
              return s.ToString();
           }
        } 
		set
		{
		   using (CvString s = new CvString(value))
           {  
              FaceInvoke.cveFacemarkLBFParamsSetModelFile(_ptr, s); 
           }
		}
     }
     
   }
}
