//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Cuda
{
   public static partial class CudaInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveCudaCascadeClassifierGetScaleFactor(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetScaleFactor(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveCudaCascadeClassifierGetMinNeighbors(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetMinNeighbors(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveCudaCascadeClassifierGetMaxNumObjects(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetMaxNumObjects(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveCudaCascadeClassifierGetFindLargestObject(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetFindLargestObject(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierGetMaxObjectSize(IntPtr obj, ref System.Drawing.Size val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetMaxObjectSize(IntPtr obj, ref System.Drawing.Size val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierGetMinObjectSize(IntPtr obj, ref System.Drawing.Size val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierSetMinObjectSize(IntPtr obj, ref System.Drawing.Size val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveCudaCascadeClassifierGetClassifierSize(IntPtr obj, ref System.Drawing.Size val);     
     
   }

   public partial class CudaCascadeClassifier
   {

     /// <summary>
     /// Parameter specifying how much the image size is reduced at each image scale
     /// </summary>
     public double ScaleFactor
     {
        get { return CudaInvoke.cveCudaCascadeClassifierGetScaleFactor(_ptr); } 
        set { CudaInvoke.cveCudaCascadeClassifierSetScaleFactor(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter specifying how many neighbors each candidate rectangle should have to retain it
     /// </summary>
     public int MinNeighbors
     {
        get { return CudaInvoke.cveCudaCascadeClassifierGetMinNeighbors(_ptr); } 
        set { CudaInvoke.cveCudaCascadeClassifierSetMinNeighbors(_ptr, value); }
     }
     
     /// <summary>
     /// The maximum number of objects
     /// </summary>
     public int MaxNumObjects
     {
        get { return CudaInvoke.cveCudaCascadeClassifierGetMaxNumObjects(_ptr); } 
        set { CudaInvoke.cveCudaCascadeClassifierSetMaxNumObjects(_ptr, value); }
     }
     
     /// <summary>
     /// If true, only return the largest object
     /// </summary>
     public bool FindLargestObject
     {
        get { return CudaInvoke.cveCudaCascadeClassifierGetFindLargestObject(_ptr); } 
        set { CudaInvoke.cveCudaCascadeClassifierSetFindLargestObject(_ptr, value); }
     }
     
     /// <summary>
     /// The maximum object size
     /// </summary>
     public System.Drawing.Size MaxObjectSize
     {
        get { System.Drawing.Size v = new System.Drawing.Size(); CudaInvoke.cveCudaCascadeClassifierGetMaxObjectSize(_ptr, ref v); return v; } 
        set { CudaInvoke.cveCudaCascadeClassifierSetMaxObjectSize(_ptr, ref value); }
     }
     
     /// <summary>
     /// The minimum object size
     /// </summary>
     public System.Drawing.Size MinObjectSize
     {
        get { System.Drawing.Size v = new System.Drawing.Size(); CudaInvoke.cveCudaCascadeClassifierGetMinObjectSize(_ptr, ref v); return v; } 
        set { CudaInvoke.cveCudaCascadeClassifierSetMinObjectSize(_ptr, ref value); }
     }
     
     /// <summary>
     /// The classifier size
     /// </summary>
     public System.Drawing.Size ClassifierSize
     {
        get { System.Drawing.Size v = new System.Drawing.Size(); CudaInvoke.cveCudaCascadeClassifierGetClassifierSize(_ptr, ref v); return v; } 
     }
     
   }
}
