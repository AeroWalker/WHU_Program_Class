//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Features2D
{
   public static partial class Features2DInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveMSERGetPass2Only(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveMSERSetPass2Only(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveMSERGetDelta(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveMSERSetDelta(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveMSERGetMinArea(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveMSERSetMinArea(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveMSERGetMaxArea(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveMSERSetMaxArea(
        IntPtr obj,  
        int val);
     
   }

   public partial class MSER
   {

     /// <summary>
     /// Pass2 only
     /// </summary>
     public bool Pass2Only
     {
        get { return Features2DInvoke.cveMSERGetPass2Only(_ptr); } 
        set { Features2DInvoke.cveMSERSetPass2Only(_ptr, value); }
     }
     
     /// <summary>
     /// Delta
     /// </summary>
     public int Delta
     {
        get { return Features2DInvoke.cveMSERGetDelta(_ptr); } 
        set { Features2DInvoke.cveMSERSetDelta(_ptr, value); }
     }
     
     /// <summary>
     /// Min Area
     /// </summary>
     public int MinArea
     {
        get { return Features2DInvoke.cveMSERGetMinArea(_ptr); } 
        set { Features2DInvoke.cveMSERSetMinArea(_ptr, value); }
     }
     
     /// <summary>
     /// Max Area
     /// </summary>
     public int MaxArea
     {
        get { return Features2DInvoke.cveMSERGetMaxArea(_ptr); } 
        set { Features2DInvoke.cveMSERSetMaxArea(_ptr, value); }
     }
     
   }
}
