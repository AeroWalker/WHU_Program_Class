//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.ML
{
   public static partial class MlInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPGetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetBackpropWeightScale(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetBackpropWeightScale(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetBackpropMomentumScale(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetBackpropMomentumScale(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetRpropDW0(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetRpropDW0(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetRpropDWPlus(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetRpropDWPlus(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetRpropDWMinus(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetRpropDWMinus(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetRpropDWMin(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetRpropDWMin(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetRpropDWMax(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetRpropDWMax(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetAnnealInitialT(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetAnnealInitialT(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetAnnealFinalT(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetAnnealFinalT(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveANN_MLPGetAnnealCoolingRatio(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetAnnealCoolingRatio(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveANN_MLPGetAnnealItePerStep(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveANN_MLPSetAnnealItePerStep(
        IntPtr obj,  
        int val);
     
   }

   public partial class ANN_MLP
   {

     /// <summary>
     /// Termination criteria of the training algorithm
     /// </summary>
     public MCvTermCriteria TermCriteria
     {
        get { MCvTermCriteria v = new MCvTermCriteria(); MlInvoke.cveANN_MLPGetTermCriteria(_ptr, ref v); return v; } 
        set { MlInvoke.cveANN_MLPSetTermCriteria(_ptr, ref value); }
     }
     
     /// <summary>
     /// BPROP: Strength of the weight gradient term
     /// </summary>
     public double BackpropWeightScale
     {
        get { return MlInvoke.cveANN_MLPGetBackpropWeightScale(_ptr); } 
        set { MlInvoke.cveANN_MLPSetBackpropWeightScale(_ptr, value); }
     }
     
     /// <summary>
     /// BPROP: Strength of the momentum term (the difference between weights on the 2 previous iterations)
     /// </summary>
     public double BackpropMomentumScale
     {
        get { return MlInvoke.cveANN_MLPGetBackpropMomentumScale(_ptr); } 
        set { MlInvoke.cveANN_MLPSetBackpropMomentumScale(_ptr, value); }
     }
     
     /// <summary>
     /// RPROP: Initial value Delta_0 of update-values Delta_{ij}
     /// </summary>
     public double RpropDW0
     {
        get { return MlInvoke.cveANN_MLPGetRpropDW0(_ptr); } 
        set { MlInvoke.cveANN_MLPSetRpropDW0(_ptr, value); }
     }
     
     /// <summary>
     /// RPROP: Increase factor
     /// </summary>
     public double RpropDWPlus
     {
        get { return MlInvoke.cveANN_MLPGetRpropDWPlus(_ptr); } 
        set { MlInvoke.cveANN_MLPSetRpropDWPlus(_ptr, value); }
     }
     
     /// <summary>
     /// RPROP: Decrease factor
     /// </summary>
     public double RpropDWMinus
     {
        get { return MlInvoke.cveANN_MLPGetRpropDWMinus(_ptr); } 
        set { MlInvoke.cveANN_MLPSetRpropDWMinus(_ptr, value); }
     }
     
     /// <summary>
     /// RPROP: Update-values lower limit
     /// </summary>
     public double RpropDWMin
     {
        get { return MlInvoke.cveANN_MLPGetRpropDWMin(_ptr); } 
        set { MlInvoke.cveANN_MLPSetRpropDWMin(_ptr, value); }
     }
     
     /// <summary>
     /// RPROP: Update-values upper limit
     /// </summary>
     public double RpropDWMax
     {
        get { return MlInvoke.cveANN_MLPGetRpropDWMax(_ptr); } 
        set { MlInvoke.cveANN_MLPSetRpropDWMax(_ptr, value); }
     }
     
     /// <summary>
     /// ANNEAL: Update initial temperature.
     /// </summary>
     public double AnnealInitialT
     {
        get { return MlInvoke.cveANN_MLPGetAnnealInitialT(_ptr); } 
        set { MlInvoke.cveANN_MLPSetAnnealInitialT(_ptr, value); }
     }
     
     /// <summary>
     /// ANNEAL: Update final temperature.
     /// </summary>
     public double AnnealFinalT
     {
        get { return MlInvoke.cveANN_MLPGetAnnealFinalT(_ptr); } 
        set { MlInvoke.cveANN_MLPSetAnnealFinalT(_ptr, value); }
     }
     
     /// <summary>
     /// ANNEAL: Update cooling ratio.
     /// </summary>
     public double AnnealCoolingRatio
     {
        get { return MlInvoke.cveANN_MLPGetAnnealCoolingRatio(_ptr); } 
        set { MlInvoke.cveANN_MLPSetAnnealCoolingRatio(_ptr, value); }
     }
     
     /// <summary>
     /// ANNEAL: Update iteration per step.
     /// </summary>
     public int AnnealItePerStep
     {
        get { return MlInvoke.cveANN_MLPGetAnnealItePerStep(_ptr); } 
        set { MlInvoke.cveANN_MLPSetAnnealItePerStep(_ptr, value); }
     }
     
   }
}
