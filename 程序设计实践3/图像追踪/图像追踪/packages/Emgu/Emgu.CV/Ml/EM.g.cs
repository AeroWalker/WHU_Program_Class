//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.ML
{
   public static partial class MlInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveEMGetClustersNumber(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveEMSetClustersNumber(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern EM.CovarianMatrixType cveEMGetCovarianceMatrixType(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveEMSetCovarianceMatrixType(
        IntPtr obj,  
        EM.CovarianMatrixType val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveEMGetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveEMSetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     
   }

   public partial class EM
   {

     /// <summary>
     /// The number of mixtures
     /// </summary>
     public int ClustersNumber
     {
        get { return MlInvoke.cveEMGetClustersNumber(_ptr); } 
        set { MlInvoke.cveEMSetClustersNumber(_ptr, value); }
     }
     
     /// <summary>
     /// The type of the mixture covariation matrices
     /// </summary>
     public EM.CovarianMatrixType CovarianceMatrixType
     {
        get { return MlInvoke.cveEMGetCovarianceMatrixType(_ptr); } 
        set { MlInvoke.cveEMSetCovarianceMatrixType(_ptr, value); }
     }
     
     /// <summary>
     /// Termination criteria of the procedure. EM algorithm stops either after a certain number of iterations (term_crit.num_iter), or when the parameters change too little (no more than term_crit.epsilon) from iteration to iteration
     /// </summary>
     public MCvTermCriteria TermCriteria
     {
        get { MCvTermCriteria v = new MCvTermCriteria(); MlInvoke.cveEMGetTermCriteria(_ptr, ref v); return v; } 
        set { MlInvoke.cveEMSetTermCriteria(_ptr, ref value); }
     }
     
   }
}
