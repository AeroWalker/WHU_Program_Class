//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.ML
{
   public static partial class MlInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern SVM.SvmType cveSVMGetType(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetType(
        IntPtr obj,  
        SVM.SvmType val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetGamma(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetGamma(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetCoef0(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetCoef0(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetDegree(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetDegree(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetC(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetC(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetNu(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetNu(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveSVMGetP(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetP(
        IntPtr obj,  
        double val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetKernel(
        IntPtr obj,  
        SVM.SvmKernelType val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMGetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveSVMSetTermCriteria(IntPtr obj, ref MCvTermCriteria val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern SVM.SvmKernelType cveSVMGetKernelType(IntPtr obj);
     
   }

   public partial class SVM
   {

     /// <summary>
     /// Type of a SVM formulation
     /// </summary>
     public SVM.SvmType Type
     {
        get { return MlInvoke.cveSVMGetType(_ptr); } 
        set { MlInvoke.cveSVMSetType(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter gamma of a kernel function
     /// </summary>
     public double Gamma
     {
        get { return MlInvoke.cveSVMGetGamma(_ptr); } 
        set { MlInvoke.cveSVMSetGamma(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter coef0 of a kernel function
     /// </summary>
     public double Coef0
     {
        get { return MlInvoke.cveSVMGetCoef0(_ptr); } 
        set { MlInvoke.cveSVMSetCoef0(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter degree of a kernel function
     /// </summary>
     public double Degree
     {
        get { return MlInvoke.cveSVMGetDegree(_ptr); } 
        set { MlInvoke.cveSVMSetDegree(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter C of a SVM optimization problem
     /// </summary>
     public double C
     {
        get { return MlInvoke.cveSVMGetC(_ptr); } 
        set { MlInvoke.cveSVMSetC(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter nu of a SVM optimization problem
     /// </summary>
     public double Nu
     {
        get { return MlInvoke.cveSVMGetNu(_ptr); } 
        set { MlInvoke.cveSVMSetNu(_ptr, value); }
     }
     
     /// <summary>
     /// Parameter epsilon of a SVM optimization problem
     /// </summary>
     public double P
     {
        get { return MlInvoke.cveSVMGetP(_ptr); } 
        set { MlInvoke.cveSVMSetP(_ptr, value); }
     }
     
     /// <summary>
     /// Initialize with one of predefined kernels
     /// </summary>
	 /// <param name="value">The value</param>
     public void SetKernel(SVM.SvmKernelType value)
     {
        MlInvoke.cveSVMSetKernel(_ptr, value); 
     }
     
     /// <summary>
     /// Termination criteria of the iterative SVM training procedure which solves a partial case of constrained quadratic optimization problem
     /// </summary>
     public MCvTermCriteria TermCriteria
     {
        get { MCvTermCriteria v = new MCvTermCriteria(); MlInvoke.cveSVMGetTermCriteria(_ptr, ref v); return v; } 
        set { MlInvoke.cveSVMSetTermCriteria(_ptr, ref value); }
     }
     
     /// <summary>
    /// Type of a SVM kernel
     /// </summary>
     public SVM.SvmKernelType KernelType
     {
        get { return MlInvoke.cveSVMGetKernelType(_ptr); } 
     }
     
   }
}
