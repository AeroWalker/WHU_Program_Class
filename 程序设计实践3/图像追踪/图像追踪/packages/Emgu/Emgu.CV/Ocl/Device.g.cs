//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Ocl
{
   public static partial class OclInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceIsNVidia(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceIsIntel(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceIsAMD(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceAddressBits(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceLinkerAvailable(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceCompilerAvailable(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceAvailable(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceMaxWorkGroupSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceMaxComputeUnits(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceLocalMemSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceMaxMemAllocSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceDeviceVersionMajor(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceDeviceVersionMinor(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern FpConfig cveDeviceHalfFPConfig(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern FpConfig cveDeviceSingleFPConfig(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern FpConfig cveDeviceDoubleFPConfig(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveDeviceHostUnifiedMemory(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern IntPtr cveDeviceGlobalMemSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceImage2DMaxWidth(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveDeviceImage2DMaxHeight(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern DeviceType cveDeviceType(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceVendorName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceDriverVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceExtensions(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceOpenCLVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveDeviceOpenCLCVersion(IntPtr obj, IntPtr str);
     
   }

   public partial class Device
   {

     /// <summary>
     /// Indicates if this is an NVidia device
     /// </summary>
     public bool IsNVidia
     {
        get { return OclInvoke.cveDeviceIsNVidia(_ptr); } 
     }
     
     /// <summary>
     /// Indicates if this is an Intel device
     /// </summary>
     public bool IsIntel
     {
        get { return OclInvoke.cveDeviceIsIntel(_ptr); } 
     }
     
     /// <summary>
     /// Indicates if this is an AMD device
     /// </summary>
     public bool IsAMD
     {
        get { return OclInvoke.cveDeviceIsAMD(_ptr); } 
     }
     
     /// <summary>
     /// The AddressBits
     /// </summary>
     public int AddressBits
     {
        get { return OclInvoke.cveDeviceAddressBits(_ptr); } 
     }
     
     /// <summary>
     /// Indicates if the linker is available
     /// </summary>
     public bool LinkerAvailable
     {
        get { return OclInvoke.cveDeviceLinkerAvailable(_ptr); } 
     }
     
     /// <summary>
     /// Indicates if the compiler is available
     /// </summary>
     public bool CompilerAvailable
     {
        get { return OclInvoke.cveDeviceCompilerAvailable(_ptr); } 
     }
     
     /// <summary>
     /// Indicates if the device is available
     /// </summary>
     public bool Available
     {
        get { return OclInvoke.cveDeviceAvailable(_ptr); } 
     }
     
     /// <summary>
     /// The maximum work group size
     /// </summary>
     public int MaxWorkGroupSize
     {
        get { return OclInvoke.cveDeviceMaxWorkGroupSize(_ptr); } 
     }
     
     /// <summary>
     /// The max compute unit
     /// </summary>
     public int MaxComputeUnits
     {
        get { return OclInvoke.cveDeviceMaxComputeUnits(_ptr); } 
     }
     
     /// <summary>
     /// The local memory size
     /// </summary>
     public int LocalMemSize
     {
        get { return OclInvoke.cveDeviceLocalMemSize(_ptr); } 
     }
     
     /// <summary>
     /// The maximum memory allocation size
     /// </summary>
     public int MaxMemAllocSize
     {
        get { return OclInvoke.cveDeviceMaxMemAllocSize(_ptr); } 
     }
     
     /// <summary>
     /// The device major version number
     /// </summary>
     public int DeviceVersionMajor
     {
        get { return OclInvoke.cveDeviceDeviceVersionMajor(_ptr); } 
     }
     
     /// <summary>
     /// The device minor version number
     /// </summary>
     public int DeviceVersionMinor
     {
        get { return OclInvoke.cveDeviceDeviceVersionMinor(_ptr); } 
     }
     
     /// <summary>
     /// The device half floating point configuration
     /// </summary>
     public FpConfig HalfFPConfig
     {
        get { return OclInvoke.cveDeviceHalfFPConfig(_ptr); } 
     }
     
     /// <summary>
     /// The device single floating point configuration
     /// </summary>
     public FpConfig SingleFPConfig
     {
        get { return OclInvoke.cveDeviceSingleFPConfig(_ptr); } 
     }
     
     /// <summary>
     /// The device double floating point configuration
     /// </summary>
     public FpConfig DoubleFPConfig
     {
        get { return OclInvoke.cveDeviceDoubleFPConfig(_ptr); } 
     }
     
     /// <summary>
     /// True if the device use unified memory
     /// </summary>
     public bool HostUnifiedMemory
     {
        get { return OclInvoke.cveDeviceHostUnifiedMemory(_ptr); } 
     }
     
     /// <summary>
     /// The global memory size
     /// </summary>
     public IntPtr GlobalMemSize
     {
        get { return OclInvoke.cveDeviceGlobalMemSize(_ptr); } 
     }
     
     /// <summary>
     /// The image 2d max width
     /// </summary>
     public int Image2DMaxWidth
     {
        get { return OclInvoke.cveDeviceImage2DMaxWidth(_ptr); } 
     }
     
     /// <summary>
     /// The image2d max height
     /// </summary>
     public int Image2DMaxHeight
     {
        get { return OclInvoke.cveDeviceImage2DMaxHeight(_ptr); } 
     }
     
     /// <summary>
     /// The ocl device type
     /// </summary>
     public DeviceType Type
     {
        get { return OclInvoke.cveDeviceType(_ptr); } 
     }
     
     /// <summary>
     /// The device name
     /// </summary>
     public String Name
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device version
     /// </summary>
     public String Version
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device vendor name
     /// </summary>
     public String VendorName
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceVendorName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device driver version
     /// </summary>
     public String DriverVersion
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceDriverVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device extensions
     /// </summary>
     public String Extensions
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceExtensions(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device OpenCL version
     /// </summary>
     public String OpenCLVersion
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceOpenCLVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device OpenCL C version
     /// </summary>
     public String OpenCLCVersion
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cveDeviceOpenCLCVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
   }
}
