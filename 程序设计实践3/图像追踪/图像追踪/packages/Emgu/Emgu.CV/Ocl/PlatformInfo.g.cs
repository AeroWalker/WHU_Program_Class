//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Ocl
{
   public static partial class OclInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cvePlatformInfoName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cvePlatformInfoVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cvePlatformInfoVendor(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cvePlatformInfoDeviceNumber(IntPtr obj);
     
   }

   public partial class PlatformInfo
   {

     /// <summary>
     /// The platform name
     /// </summary>
     public String Name
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cvePlatformInfoName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The platform version
     /// </summary>
     public String Version
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cvePlatformInfoVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The platform vendor
     /// </summary>
     public String Vendor
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              OclInvoke.cvePlatformInfoVendor(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The number of devices
     /// </summary>
     public int DeviceNumber
     {
        get { return OclInvoke.cvePlatformInfoDeviceNumber(_ptr); } 
     }
     
   }
}
