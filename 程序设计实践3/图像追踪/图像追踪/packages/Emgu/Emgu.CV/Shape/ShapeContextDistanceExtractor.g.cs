//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Shape
{
   public static partial class ShapeInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveShapeContextDistanceExtractorGetIterations(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetIterations(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveShapeContextDistanceExtractorGetAngularBins(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetAngularBins(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveShapeContextDistanceExtractorGetRadialBins(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetRadialBins(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetInnerRadius(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetInnerRadius(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetOuterRadius(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetOuterRadius(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveShapeContextDistanceExtractorGetRotationInvariant(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetRotationInvariant(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetShapeContextWeight(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetShapeContextWeight(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetImageAppearanceWeight(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetImageAppearanceWeight(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetBendingEnergyWeight(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetBendingEnergyWeight(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveShapeContextDistanceExtractorGetStdDev(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveShapeContextDistanceExtractorSetStdDev(
        IntPtr obj,  
        float val);
     
   }

   public partial class ShapeContextDistanceExtractor
   {

     /// <summary>
     /// The number of iterations
     /// </summary>
     public int Iterations
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetIterations(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetIterations(_ptr, value); }
     }
     
     /// <summary>
     /// The number of angular bins in the shape context descriptor.
     /// </summary>
     public int AngularBins
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetAngularBins(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetAngularBins(_ptr, value); }
     }
     
     /// <summary>
     /// The number of radial bins in the shape context descriptor.
     /// </summary>
     public int RadialBins
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetRadialBins(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetRadialBins(_ptr, value); }
     }
     
     /// <summary>
     /// The value of the inner radius.
     /// </summary>
     public float InnerRadius
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetInnerRadius(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetInnerRadius(_ptr, value); }
     }
     
     /// <summary>
     /// The value of the outer radius.
     /// </summary>
     public float OuterRadius
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetOuterRadius(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetOuterRadius(_ptr, value); }
     }
     
     /// <summary>
     /// Rotation Invariant
     /// </summary>
     public bool RotationInvariant
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetRotationInvariant(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetRotationInvariant(_ptr, value); }
     }
     
     /// <summary>
     /// The weight of the shape context distance in the final distance value.
     /// </summary>
     public float ShapeContextWeight
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetShapeContextWeight(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetShapeContextWeight(_ptr, value); }
     }
     
     /// <summary>
     /// The weight of the appearance cost in the final distance value.
     /// </summary>
     public float ImageAppearanceWeight
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetImageAppearanceWeight(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetImageAppearanceWeight(_ptr, value); }
     }
     
     /// <summary>
     /// The weight of the Bending Energy in the final distance value.
     /// </summary>
     public float BendingEnergyWeight
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetBendingEnergyWeight(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetBendingEnergyWeight(_ptr, value); }
     }
     
     /// <summary>
     /// Standard Deviation.
     /// </summary>
     public float StdDev
     {
        get { return ShapeInvoke.cveShapeContextDistanceExtractorGetStdDev(_ptr); } 
        set { ShapeInvoke.cveShapeContextDistanceExtractorSetStdDev(_ptr, value); }
     }
     
   }
}
