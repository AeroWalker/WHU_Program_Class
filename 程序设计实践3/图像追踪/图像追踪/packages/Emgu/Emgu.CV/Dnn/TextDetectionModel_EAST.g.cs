//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Dnn
{
   public static partial class DnnInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveTextDetectionModel_EASTGetConfidenceThreshold(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveTextDetectionModel_EASTSetConfidenceThreshold(
        IntPtr obj,  
        float val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern float cveTextDetectionModel_EASTGetNMSThreshold(IntPtr obj);
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveTextDetectionModel_EASTSetNMSThreshold(
        IntPtr obj,  
        float val);
     
   }

   public partial class TextDetectionModel_EAST
   {

     /// <summary>
     /// Confidence threshold
     /// </summary>
     public float ConfidenceThreshold
     {
        get { return DnnInvoke.cveTextDetectionModel_EASTGetConfidenceThreshold(_ptr); } 
        set { DnnInvoke.cveTextDetectionModel_EASTSetConfidenceThreshold(_ptr, value); }
     }
     
     /// <summary>
     /// Non-maximum suppression threshold
     /// </summary>
     public float NMSThreshold
     {
        get { return DnnInvoke.cveTextDetectionModel_EASTGetNMSThreshold(_ptr); } 
        set { DnnInvoke.cveTextDetectionModel_EASTSetNMSThreshold(_ptr, value); }
     }
     
   }
}
